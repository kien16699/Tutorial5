suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(here))
library(readxl)
library(purrr)
suppressPackageStartupMessages(library(magrittr))
suppressPackageStartupMessages(library(curl))
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("Rail PT Public Monthly Figures cleaned.xlsx"))){
curl_download(url, "Rail PT Public Monthly Figures cleaned.xlsx")}
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))){
curl_download(url, here::here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))}
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))){
curl_download(url, here::here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))}
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("here")
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(here))
library(readxl)
library(purrr)
suppressPackageStartupMessages(library(magrittr))
suppressPackageStartupMessages(library(curl))
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))){
curl_download(url, here::here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))}
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))){
curl_download(url, here::here("data", "Rail_PT_Public_Monthly_Figures_cleaned.xlsx"))}
#Save the file
url<-"https://wcd.numbat.space/lectures/data/lecture-05/Rail%20PT%20Public%20Monthly%20Figures%20cleaned.xlsx"
if(!file.exists(here("Rail PT Public Monthly Figures cleaned.xlsx"))){
curl_download(url, "Rail PT Public Monthly Figures cleaned.xlsx")}
#or adjust this line to where you have saved the file (you might need to add *'folder','subfolder',* depending on where you have saved the file)
filename <- here('Rail PT Public Monthly Figures cleaned.xlsx')
sheets <- excel_sheets(filename)
perf <- map(sheets, ~read_xlsx(filename, sheet=.x))
#Name the sheets in the list by
names(perf)<-sheets
#Create a list of variables which you want to keep
keep<-c("Parent_Route","Mode","Service_Year", "Service_Date", "Service_Month",
"Reporting_Group","num_services_scheduled","num_services_cancelled","num_services_short","num_services_bypassed","num_services_scheduled_at_dest","num_services_on_time_at_dest","num_observations_on_time","num_observations_scheduled", "pct_on_time_avg")
#These lines make sure that the data is in the correct format as it is read in from the sheet (not as character).
perf$Yarra$pct_on_time_at_dest%<>% as.numeric()
#Create a list of variables which you want to keep
keep<-c("Parent_Route","Mode","Service_Year", "Service_Date", "Service_Month",
"Reporting_Group","num_services_scheduled","num_services_cancelled","num_services_short","num_services_bypassed","num_services_scheduled_at_dest","num_services_on_time_at_dest","num_observations_on_time","num_observations_scheduled", "pct_on_time_avg")
#These lines make sure that the data is in the correct format as it is read in from the sheet (not as character).
perf$Yarra$pct_on_time_at_dest%<>% as.numeric()
#Create a list of variables which you want to keep
keep<-c("Parent_Route","Mode","Service_Year", "Service_Date", "Service_Month",
"Reporting_Group","num_services_scheduled","num_services_cancelled","num_services_short","num_services_bypassed","num_services_scheduled_at_dest","num_services_on_time_at_dest","num_observations_on_time","num_observations_scheduled", "pct_on_time_avg")
#These lines make sure that the data is in the correct format as it is read in from the sheet (not as character).
perf$Yarra$pct_on_time_at_dest%<>% as.numeric()
perf$Yarra$pct_not_on_time_at_dest%<>% as.numeric()
#Create a list of variables which you want to keep
keep<-c("Parent_Route","Mode","Service_Year", "Service_Date", "Service_Month",
"Reporting_Group","num_services_scheduled","num_services_cancelled","num_services_short","num_services_bypassed","num_services_scheduled_at_dest","num_services_on_time_at_dest","num_observations_on_time","num_observations_scheduled", "pct_on_time_avg")
#These lines make sure that the data is in the correct format as it is read in from the sheet (not as character).
perf$Yarra$pct_on_time_at_dest%<>% as.numeric()
perf$Yarra$pct_not_on_time_at_dest%<>% as.numeric()
perf$Yarra$pct_on_time_avg%<>% as.numeric()
#remove extra columns not used (you may want to edit the 'keep' list if you want to look at detailed data at route level)
performance <- dplyr::select(performance,all_of(keep))
#Create a list of variables which you want to keep
keep<-c("Parent_Route","Mode","Service_Year", "Service_Date", "Service_Month",
"Reporting_Group","num_services_scheduled","num_services_cancelled","num_services_short","num_services_bypassed","num_services_scheduled_at_dest","num_services_on_time_at_dest","num_observations_on_time","num_observations_scheduled", "pct_on_time_avg")
#These lines make sure that the data is in the correct format as it is read in from the sheet (not as character).
perf$Yarra$pct_on_time_at_dest%<>% as.numeric()
perf$Yarra$pct_not_on_time_at_dest%<>% as.numeric()
perf$Yarra$pct_on_time_avg%<>% as.numeric()
#stick all 3 sheets together into one data frame from a list
performance <- dplyr::bind_rows(perf, .id="Mode")
#remove extra columns not used (you may want to edit the 'keep' list if you want to look at detailed data at route level)
performance <- dplyr::select(performance,all_of(keep))
#remove extra columns not used (you may want to edit the 'keep' list if you want to look at detailed data at route level)
performance <- dplyr::select(performance,all_of(keep))
View(performance)
head(performance)
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
#remove extra columns not used (you may want to edit the 'keep' list if you want to look at detailed data at route level)
performance <- dplyr::select(performance,all_of(keep))
View(performance)
head(performance)
library(dplyr)
calc_measures<-function(input){input %>% mutate(
Reliability=case_when(
Mode =="Metro" ~ ((1-((num_services_cancelled+(0.25*num_services_short)+(0.125*num_services_bypassed))
/num_services_scheduled))*100),
Mode == "Yarra" ~ (1-((num_services_cancelled+ 0.125*num_services_short)
/num_services_scheduled))*100,
Mode == "VLine" ~  (1-(num_services_cancelled/num_services_scheduled))*100),
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
head(perf_month)
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
head(perf_month)
performance %>%
dplyr::filter(Mode == "Yarra", Service_Year == 2020) %>%
group_by(Parent_Route) %>%
summarise(monthly_average_2020 = mean(pct_on_time_avg)) %>%
arrange(monthly_average_2020)
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
head(perf_month)
performance %>%
dplyr::filter(Mode == "Yarra", Service_Year == 2020) %>%
group_by(Parent_Route) %>%
summarise(monthly_average_2020 = mean(pct_on_time_avg)) %>%
arrange(monthly_average_2020)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Reporting_Group, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() %>%
select("Service_Year","Service_Month", "Mode","Reporting_Group","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")->perf_group
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
head(perf_month)
performance %>%
dplyr::filter(Mode == "Yarra", Service_Year == 2020) %>%
group_by(Parent_Route) %>%
summarise(monthly_average_2020 = mean(pct_on_time_avg)) %>%
arrange(monthly_average_2020)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Reporting_Group, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() %>%
select("Service_Year","Service_Month", "Mode","Reporting_Group","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")->perf_group
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
Punctuality=case_when(
Mode =="Metro" ~ (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100,
Mode == "Yarra" ~ (num_observations_on_time / num_observations_scheduled)*100,
Mode == "VLine" ~  (num_services_on_time_at_dest/num_services_scheduled_at_dest)*100)
)
}
library(magrittr)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() -> perf_month
perf_month%<>%
select("Service_Year","Service_Month", "Mode","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")
head(perf_month)
performance %>%
dplyr::filter(Mode == "Yarra", Service_Year == 2020) %>%
group_by(Parent_Route) %>%
summarise(monthly_average_2020 = mean(pct_on_time_avg)) %>%
arrange(monthly_average_2020)
performance %>%
group_by(Service_Date, Service_Year, Service_Month, Reporting_Group, Mode) %>%
summarise(across(starts_with("num_"), sum, .names = "{.col}"),.groups="drop") %>%
calc_measures() %>%
select("Service_Year","Service_Month", "Mode","Reporting_Group","Reliability", "Punctuality")  %>%
pivot_longer(cols=c(Reliability, Punctuality),names_to="Measure")->perf_group
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
head(perf_group)
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.factor(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015  & Mode=="Yarra" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb),
y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) +
labs(x="Month", y="Punctuality", colour="Year",
title="Tram Punctuality by Reporting Group") +theme(legend.position = "bottom")
dplyr::filter(perf_group,Service_Year >= 2015 & Mode=="VLine" & Measure=="Punctuality") %>%
ggplot(
aes(x=factor(month.abb[Service_Month],levels=month.abb), y=value, colour=as.character(Service_Year),
group= Service_Year))+geom_line() +
facet_wrap(~Reporting_Group) + labs(x="Month", y="Punctuality", colour="Year",
title="VLine Punctuality by Reporting Group") +theme(legend.position = "bottom")
